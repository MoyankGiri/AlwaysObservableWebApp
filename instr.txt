Steps to generate the grpc python code:

cd /home/chandradhar/Projects/CTY/AlwaysObservableWebApp

source venv/bin/activate

sudo ./generate_proto.sh post_svc post

 ./generate_proto.sh post_svc post auth_svc user

For client and server:
source /venv/bin/activate
clear;python3 post_server.py   
❯ clear;python3 post_client.py   

Steps to run the flask app:

run the grpc server for the required microservice
change the directory of the auth_svc according to your system
then run the api gateway

todo:

add edit posts/update posts button
add in comments UI in blog posts
add logout UI in navbar
add dropdown to allow user to select "fetchRecent" time parameter and send it in the request.
add all port numbers in .env file
add graphana UI
add htp level error metrics
add grpc inbuilt client/server metrics
generate alerts
merge codebase
debugg and analyse collected metrics
integrate with kubernetes

//prometheus
1.if not already configured, at the file: /home/chandradhar/prometheus-2.34.0.linux-amd64/prometheus.yml, change the target to the webapplication url

2.to start prometheus, go to the prometheus directory located at: /home/chandradhar/prometheus-2.34.0.linux-amd64 and run ./prometheus

3.Add all /metrics target post numbers as values in prometheus.yml's targets key list

4. goto localhost:9090/graphs to see the graphs in the browser

//to start graphana
1.go to /tmp
2.type sudo systemctl start grafana-server to start graphana server
3.View its status @: ❯ sudo systemctl status grafana-server
4.it would be running in port 3000
username,password=admin,admin

//to setup alert-manager
1.go to alert manager folder
2.run ./alertmanager
3.goto localhost:9093